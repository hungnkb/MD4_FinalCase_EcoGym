<!DOCTYPE html>
<html lang="en">

<head>
    <%- include("layouts/header.ejs") %>
    <title>EcoGYM</title>
</head>

<body>
    <header>
        <nav class="navbar navbar-expand-lg bg-light">
            <div class="container-fluid">
                <div class="brand-wrapper">
                    <h2 class="m-0 p-0"><i style="color: green"><b>E</b>co</i><i style="color: orange">GYM</i></h2>
                    <i style="font-family: monospace; font-size: 16px;">Smart financial management</i>
                </div>
                <div class="collapse navbar-collapse ms-5" id="navbarSupportedContent">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item">
                            <a class="nav-link active" aria-current="page" href="" onclick="categoryPickDefault(event)"
                                data-bs-toggle="modal" data-bs-target="#transactions">Transactions</a>
                        </li>
                        <li class="nav-item">
                            <ul class="navbar-nav me-auto mb-2 mb-lg-0 mr-4">
                                <li class="nav-item dropdown">
                                    <select class="form-control custom-select" style="border: none" id="walletInHome"
                                        onfocus="totalMoneyByWallet(event)"
                                        onchange="totalMoneyByWallet(event); getTransactions(event, 0, 'today')">
                                        <option class="walletName" value="all-wallet" selected="selected">All wallet
                                        </option>
                                        <% wallets.forEach( (wallet)=> { %>
                                        <option class="walletName" value="<%= wallet.walletName%>">
                                            <%= wallet.walletName%>
                                        </option>
                                        <% }) %>
                                    </select>
                                </li>

                            </ul>
                        </li>
                        <li class="nav-item">
                            <p class="mt-2" id="totalMoney" style="color: green">
                                <%=totalMoney%>
                            </p>
                        </li>
                    </ul>
                </div>

                <ul class="navbar-nav me-auto mb-2 mb-lg-0 mr-4">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
                            data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <%= userInfo[0].email %>
                        </a>
                        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                            <a class="dropdown-item" href="auth/profile">Profile</a>
                            <a class="dropdown-item" href="/wallet">Wallet Manager</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="/category">Category Manager</a>
                        </div>
                    </li>
                </ul>
                <button type="button" onclick="logout()" class="btn btn-secondary">Logout</button>
            </div>
        </nav>
    </header>

    <main class="body-page container d-flex justify-content-center flex-column">
        <button onclick="categoryPickDefault(event)" type="button" style="width: 100%;" class="btn btn-primary"
            data-toggle="modal" data-target="#exampleModalCenter">
            Add new Transaction
        </button>
        <!-- Modal add new transaction -->
        <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog"
            aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Transaction</h1>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <form action="/api/transaction" method="post" id="form-transaction">
                        <div class="modal-body">
                            <label class="form-label">Wallet</label>
                            <select class="custom-select mb-3" id="wallet">
                                <% wallets.forEach(w=> { %>
                                <option value="<%=w.walletName%>">
                                    <%=w.walletName%>
                                </option>
                                <% }) %>
                            </select>
                            <label class="form-label">Category</label>
                            <select id="category" class="custom-select mb-3" onfocus="categoryPick(event)"
                                onchange="categoryPick(event)" id="category">
                                <option value="income">Income</option>
                                <option value="outcome">Outcome</option>
                            </select>
                            <label class="form-label">Detail</label>
                            <div id="categoryNameList">

                            </div>

                            <div class="mb-3">
                                <label class="form-label">Amount</label>
                                <input required name="amount" type="number" class="form-control" id="amount">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Date</label>
                                <input required name="date" type="date" class="form-control" id="date">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <input required type="text" class="form-control" id="desc">
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="submit" onclick="submitTransaction(event)"
                                class="btn btn-primary">Add</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <section class="transactions mt-5 m-auto" style="width: 900px">
            <div>
                <ul class="nav nav-tabs d-flex justify-content-around mt-5">
                    <li class="nav-item">
                        <a id="linkToday" class="nav-link link-trans" href="#allTransactions"
                            onclick="getTransactions(event, 0,'today')">Today</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link link-trans" href="#allTransactions"
                            onclick="getTransactions(event, 0,'month')">This month</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link link-trans" href="#allTransactions"
                            onclick="getTransactions(event, 0,'custom'); openCustom()">Custom</a>
                    </li>
                </ul>

            </div>
            <div id="open-custom"></div>
            <div id="allTransactions" class="trans-content mt-3">

            </div>
            <!-- count page -->

        </section>
        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-center">
                <div id="page-list-number"></div>
            </ul>
        </nav>
    </main>

    <!-- script -->
    <%- include("layouts/b5script.ejs") %>
    <script>

        // active class transaction
        let transContents = document.querySelector("#allTransactions");
        let btnLinks = document.querySelectorAll(".link-trans");
        function addDnoneClass(content) {
            content.classList.add("d-none")
        }
        function removeActiveClass(listBtn) {
            listBtn.forEach(btn => {
                btn.classList.remove("active");
            })
        }
        function activeTrans() {
            for (let i = 0; i < btnLinks.length; i++) {
                btnLinks[i].addEventListener('click', () => {
                    addDnoneClass(transContents)
                    removeActiveClass(btnLinks)
                    transContents.classList.remove("d-none");
                    btnLinks[i].classList.add("active");
                })
            }
        }
        activeTrans()
        // logout

        let logout = () => {
            axios({
                method: 'get',
                url: 'http://localhost:3000/api/logout',
            }).then(result => {
                window.location.replace(
                    `http://${window.location.hostname}:${window.location.port}/auth/login`
                )
            })
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // set default nameCategory input in Add transaction modal
        let categoryPickDefault = (event) => {
            let category = event.target.value;
            document.querySelector('#categoryNameList').innerHTML = `
                        <select id="categoryName" class="custom-select mb-3">
                                    <% defaultCategory.forEach(ic => { %>
                                        <% if (ic.status ==="income") {%>
                                        <option value="<%= ic.categoryName %>"><%= ic.categoryName %></option>
                                        <% } %>
                                    <% }) %>
                                    <% category.forEach(ic => { %>
                                        <% defaultCategory.forEach(id => { %>
                                            <% if (ic.categoryName !== id.categoryName){ %>
                                            <option value="<%= ic.categoryName %>"><%= ic.categoryName %></option>
                                            <% } %>
                                        <% }) %>
                                    <% }) %>
                                </select>
                        `
        }

        // check category income/outcome then render nameCategory input in Add transaction modal
        let categoryPick = event => {
            let category = event.target.value;
            if (category == 'income') {
                document.querySelector('#categoryNameList').innerHTML = `
                <select id="categoryName" class="custom-select mb-3">
                                    <% defaultCategory.forEach(ic => { %>
                                        <% if (ic.status ==="income") {%>
                                        <option value="<%= ic.categoryName %>"><%= ic.categoryName %></option>
                                        <% } %>
                                    <% }) %>
                                    <% category.forEach(ic => { %>
                                        <% defaultCategory.forEach(id => { %>
                                            <% if (ic.categoryName !== id.categoryName){ %>
                                            <option value="<%= ic.categoryName %>"><%= ic.categoryName %></option>
                                            <% } %>
                                        <% }) %>
                                    <% }) %>
                                </select>
                        `
            } else {
                document.querySelector('#categoryNameList').innerHTML = `
                <select id="categoryName" class="custom-select mb-3">
                                    <% defaultCategory.forEach(ic => { %>
                                        <% if (ic.status ==="outcome") {%>
                                        <option value="<%= ic.categoryName %>"><%= ic.categoryName %></option>
                                        <% } %>
                                    <% }) %>
                                    <% category.forEach(ic => { %>
                                        <% defaultCategory.forEach(id => { %>
                                            <% if (ic.categoryName !== id.categoryName){ %>
                                            <option value="<%= ic.categoryName %>"><%= ic.categoryName %></option>
                                            <% } %>
                                        <% }) %>
                                    <% }) %>
                                </select>
                        `
            }
        }

        // send data-form
        let submitTransaction = (event) => {
            let form = document.querySelector('#form-transaction');
            let nameWallet = document.querySelector('#wallet');
            let moneyTrade = document.querySelector('#amount');
            let nameCategory = document.querySelector('#categoryName');
            let timeTrade = document.querySelector('#date');
            let status = document.querySelector('#category');
            let desc = document.querySelector('#desc');
            event.preventDefault();

            // check if required inputs are filled then send data through API. 
            // URL and Method are given from form-transaction attribute
            if (moneyTrade.value && timeTrade.value && nameCategory.value && status.value) {

                axios({
                    method: 'post',
                    url: 'http://localhost:3000/api/transaction',
                    data: {
                        nameWallet: nameWallet.value,
                        moneyTrade: moneyTrade.value,
                        nameCategory: nameCategory.value,
                        timeTrade: timeTrade.value,
                        status: status.value,
                        desc: desc.value
                    }
                }).then(result => {
                    Swal.fire({
                        position: 'center',
                        icon: 'success',
                        title: 'Create transaction success',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(result => {
                        window.location.replace(
                            `http://${window.location.hostname}:${window.location.port}/`
                        )
                    }).catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Please fill all field before save changes',
                            // footer: '<a href="">Why do I have this issue?</a>'
                        })
                    })
                })

            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Please fill all field before save changes',
                    // footer: '<a href="">Why do I have this issue?</a>'
                })
            }
        }

        const totalMoneyByWallet = (event) => {
            event.preventDefault();
            axios({
                method: 'get',
                url: 'http://localhost:3000/api/wallet',
            })
                .then(function (result) {
                    let wallets = result.data.wallets;
                    let walletName = event.target;
                    let totalMoney = 0;
                    if (walletName == 'all-wallet') {
                        for (let i = 0; i < wallets.length; i++) {
                            totalMoney += wallets[i].totalMoneyLeft;
                        }
                        document.querySelector('#totalMoney').innerHTML = totalMoney;
                    } else {
                        for (let i = 0; i < wallets.length; i++) {
                            if (wallets[i].walletName == walletName) {
                                document.querySelector('#totalMoney').innerHTML = wallets[i].totalMoneyLeft;
                            }
                        }
                    }
                });
        }

        // render today and month function
        const getTransTodayAndMonth = (transactions) => {
            document.querySelector("#allTransactions").innerHTML = `<div class="flow mt-2">
                <div class="inflow d-flex justify-content-between">
                    <p>Inflow</p>
                    <p class="money-in">40000</p>
                </div>
                <div class="outflow d-flex justify-content-between">
                    <p>Outflow</p>
                    <p class="money-out">40000</p>
                </div>
                <hr style="width: 50%; margin-left: 50%; margin-top: 0;">
                <div class="outflow d-flex justify-content-end">
                    <p class="money-out">40000</p>
                </div>
            </div>`

            transactions.forEach(transaction => {
                document.querySelector('#allTransactions').innerHTML += `
                        <div class="trans-item mb-2 p-3"
                    style="border-top: 2px solid grey; background-color: rgb(226, 226, 226);">
                    <div class="trans-category mt-2 d-flex justify-content-between">
                        <h3 class="trans-category-name">${transaction.nameCategory}</h3>
                        <div class="trans-btn">
                            <button data-bs-toggle="modal" data-bs-target="#modal-${transaction._id}" type="button" class="btn btn-primary" onchange="" onfocus="" onclick="categoryPickEditDefault(event, '${transaction.status}', '${transaction.nameCategory}', '${transaction._id}')">Edit</button>
                            <button data-bs-toggle="modal" data-bs-target="#modal-delete-${transaction._id}" onclick="deleteTransaction(event, '${transaction.id}')" type="submit" class="btn btn-danger">Delete</button>
                        </div>
                    </div>
                    <div class="trans-info">
                        <div class="trans-info-top d-flex justify-content-between mt-2">
                            <p class="trans-time">${transaction.timeTrade.split('T')[0]}</p>
                            <h5 class="money">${transaction.moneyTrade}</h5>
                        </div>
                        <div class="trans-info-bot d-flex justify-content-start mt-2">
                            <p class="trans-desc">${transaction.desc}</p>
                        </div>
                    </div>
                </div>

                <!-- Modal Edit Transaction -->
                
               
                <div class="modal fade" id="modal-${transaction._id}" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Edit Transaction</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form action="/api/transaction" method="put" id="form-edit-transaction">

                        <label class="form-label">Wallet</label>
                            <select class="custom-select mb-3" id="walletEdit-${transaction._id}">
                                <% wallets.forEach(w=> { %>
                                    <option value="${transaction.nameWallet}">
                                        <%=w.walletName%>
                                    </option>
                                    <% }) %>
                                        <option value=""></option>
                            </select>
                            <label class="form-label">Category</label>
                            <div id="statusEditList-${transaction._id}">

                                </div>
                            
                            <label class="form-label">Detail</label>
                            <div id="categoryNameEditList-${transaction._id}">

                            </div>

                            <div class="mb-3">
                                <label class="form-label">Amount</label>
                                <input value="${transaction.moneyTrade}" required name="amount" type="number" class="form-control" id="amountEdit-${transaction._id}">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Date</label>
                                <input value="${transaction.timeTrade.split('T')[0]}" required name="date" type="date" class="form-control" id="dateEdit-${transaction._id}">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <input value="${transaction.desc}" required type="text" class="form-control" id="descEdit-${transaction._id}">
                            </div>
                      
                        
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" onclick="submitEditTransaction(event, '${transaction._id}', '${transaction.moneyTrade}')">Save changes</button>
                    </div>
                    </div>
                </div>
                </div>
            </form>

            <!-- Modal Delete Transaction -->
            <div class="modal fade" id="modal-delete-${transaction._id}" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Transaction</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure to delete?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button onclick="submitDeleteTransaction(event, '${transaction._id}', '${transaction.moneyTrade}', '${transaction.status}', '${transaction.nameWallet}')" type="button" class="btn btn-danger">Save changes</button>
                </div>
                </div>
            </div>
            </div>
            
            
            `
            });
        }

        let categoryPickEditDefault = (event, status, categoryName, id) => {
            // let category = event.target.value;
            if (status == 'income') {
                document.querySelector(`#statusEditList-${id}`).innerHTML = `
                        <select class="custom-select mb-3" onfocus="categoryPickEdit(event, '${id}')" onchange="categoryPickEdit(event, '${id}')" id="categoryEdit-${id}">
                                <option value="income">Income</option>
                                <option value="outcome">Outcome</option>
                            </select>
                        `
            } else {
                document.querySelector(`#statusEditList-${id}`).innerHTML = `
                        <select class="custom-select mb-3" onfocus="categoryPickEdit(event, '${id}')" onchange="categoryPickEdit(event, '${id}')" id="categoryEdit-${id}">
                                <option value="outcome">Outcome</option>
                                <option value="income">Income</option>
                            </select>
                        `
            }
            document.querySelector(`#categoryNameEditList-${id}`).innerHTML = `
                        <select id="categoryEditName-${id}" class="custom-select mb-3">
                            <option value="${categoryName}">${categoryName}</option>
                                    <% defaultCategory.forEach(ic => { %>
                                        <% if (ic.status ==="income") {%>
                                        <option value="<%= ic.categoryName %>"><%= ic.categoryName %></option>
                                        <% } %>
                                    <% }) %>


                                    <% category.forEach(ic => { %>
                                           
                                            <option value="<%= ic.categoryName %>"><%= ic.categoryName %></option>
                                         
                                
                                    <% }) %>
                                </select>
                        `
        }

        // check category income/outcome then render nameCategory input in Add transaction modal
        let categoryPickEdit = (event, id) => {
            let category = event.target.value;
            if (category == 'income') {
                document.querySelector(`#categoryNameEditList-${id}`).innerHTML = `
                <select id="categoryName" class="custom-select mb-3">
                                    <% defaultCategory.forEach(ic => { %>
                                        <% if (ic.status ==="income") {%>
                                        <option value="<%= ic.categoryName %>"><%= ic.categoryName %></option>
                                        <% } %>
                                    <% }) %>
                                    <% category.forEach(ic => { %>
                                       
                                            <option value="<%= ic.categoryName %>"><%= ic.categoryName %></option>
                                        
                                    <% }) %>
                                </select>
                        `
            } else {
                document.querySelector(`#categoryNameEditList-${id}`).innerHTML = `
                <select id="categoryName" class="custom-select mb-3">
                                    <% defaultCategory.forEach(ic => { %>
                                        <% if (ic.status ==="outcome") {%>
                                        <option value="<%= ic.categoryName %>"><%= ic.categoryName %></option>
                                        <% } %>
                                    <% }) %>
                                    <% category.forEach(ic => { %>
                                
                                            <option value="<%= ic.categoryName %>"><%= ic.categoryName %></option>
                                      
                                    <% }) %>
                                </select>
                        `
            }
        }

        let submitEditTransaction = (event, id, currentMoney) => {
            event.preventDefault();
            let form = document.querySelector('#form-edit-transaction');
            let nameWallet = document.querySelector(`#walletEdit-${id}`);
            let status = document.querySelector(`#categoryEdit-${id}`);
            let nameCategory = document.querySelector(`#categoryEditName-${id}`);
            let moneyTrade = document.querySelector(`#amountEdit-${id}`);
            let timeTrade = document.querySelector(`#dateEdit-${id}`);
            let desc = document.querySelector(`#descEdit-${id}`);

            if (nameWallet.value && status.value && nameCategory.value && moneyTrade.value && timeTrade.value) {
            }
            axios({
                method: 'put',
                url: 'http://localhost:3000/api/transaction/',
                data: {
                    _id: id,
                    nameWallet: nameWallet.value,
                    moneyTrade: moneyTrade.value,
                    status: status.value,
                    nameCategory: nameCategory.value,
                    timeTrade: timeTrade.value,
                    desc: desc.value,
                    currentMoney: currentMoney,
                }
            }).then(result => {
                Swal.fire({
                    position: 'center',
                    icon: 'success',
                    title: 'Update transaction success',
                    showConfirmButton: false,
                    timer: 1500
                }).then(result => {
                    window.location.replace(
                        `http://${window.location.hostname}:${window.location.port}/`
                    )
                }).catch(error => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Please fill all field before save changes',
                        // footer: '<a href="">Why do I have this issue?</a>'
                    })
                })
            })
        }

        let submitDeleteTransaction = (event, id, currentMoney, status, nameWallet) => {
            event.preventDefault();
            axios({
                method: 'delete',
                url: `http://localhost:3000/api/transaction/${id}&${status}&${currentMoney}&${nameWallet}`,
            }).then(result => {
                Swal.fire({
                    position: 'center',
                    icon: 'success',
                    title: 'Delete transaction success',
                    showConfirmButton: false,
                    timer: 1500
                }).then(result => {
                    window.location.replace(
                        `http://${window.location.hostname}:${window.location.port}/`
                    )
                }).catch(error => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Something goes wrong, please try again',
                        // footer: '<a href="">Why do I have this issue?</a>'
                    })
                })
            })
        }

        let openCustom = () => {
            document.querySelector('#open-custom').innerHTML = `
                <div class="mb-3">
                    <label for="exampleInputEmail1" class="form-label">From</label>
                    <input type="date" class="form-control" id="fromDate" aria-describedby="emailHelp">
                </div>
                <div class="mb-3">
                    <label for="exampleInputEmail1" class="form-label">To</label>
                    <input type="date" class="form-control" id="toDate" aria-describedby="emailHelp">
                </div>
                <button type="submit" onfocus="pickDate(event)" class="btn btn-primary btn-sm">Apply</button>
                `;
        }

        let pickDate = (event) => {
            getTransactions(event, 0, 'custom');
        }

        let getTransactions = (event, offset, period) => {
            if (!offset) {
                offset = 0;
            }
            let walletName = document.querySelector("#walletInHome");
            // check period
            let fromDate = new Date('2023-03-08T00:00:00.000Z');
            let toDate = new Date('2023-03-08T00:00:00.000Z');

            if (period == 'today') {
                fromDate = new Date().toISOString().split('T')[0];
                toDate = new Date().toISOString().split('T')[0];

            } else if (period == 'month') {
                let month = new Date().getMonth() + 1
                let year = new Date().getFullYear();
                fromDate = new Date(`${year}-${month}-1`);
                toDate = new Date(`${year}-${month}-31`);


            } else if (period == 'custom') {
                fromDate = document.querySelector('#fromDate').value;
                toDate = document.querySelector('#toDate').value;
            }

            console.log(fromDate, '---', toDate);
            document.querySelector('#allTransactions').innerHTML = '';
            // document.querySelector('#custom').innerHTML = `
            //     <div class="timePick">
            //         <label class="form-label" for="fromTime">From: </label>
            //         <input required type="date" name="fromTime" class="form-control" id="fromTime">
            //         <label class="form-label" for="toTime">To: </label>
            //         <input required type="date" name="toTime" class="form-control" id="toTime">
            //     </div>
            // `;
            document.querySelector('#page-list-number').innerHTML = '';
            axios({
                method: 'get',
                url: `http://localhost:3000/api/transaction/${offset}&${walletName.value}&${fromDate}&${toDate}`,
            }).then(result => {
                if (result.data.period == "today" || result.data.period == "month") {
                    getTransTodayAndMonth(result.data.transactions)
                }
                // xử lý custom


                let total = Math.ceil(result.data.total / 5);
                for (let i = 0; i < total; i++) {
                    document.querySelector('#page-list-number').innerHTML += `
                            <li class="page-item"><span style="cursor: pointer" onclick="getTransactions(event,${i}, ${period})">${i + 1}</span></li>
                        `
                }
            })
        }

        getTransactions();

    </script>
</body>

</html>